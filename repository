typedef struct nodetype
{
	int info;
	struct nodetype *next;
}node;

void insertatbeg(node**start,int item)
{
	node *ptr;
	ptr=(node*)malloc(sizeof(node));
	ptr->info=item;
	ptr->next=*start;
	*start=ptr;
}

void insertatend(node**start,int item)
{
	node *ptr,*last;
	ptr=(node*)malloc(sizeof(node));
	ptr->info=item;
	ptr->next=NULL;
	if(*start==NULL)
	*start=ptr;
	else
	{ 
		last = *start;
		while(last->next!=NULL)
		{
			last=last->next;
		}
		last->next=ptr;
	}
}

void display(node*start)
{
	if (start==NULL)
	{
		printf("\n ll is empty");
		return;
	}
	while(start!=0)
	{
		printf("%d->",start->info);
		start=start->next;
	}
}
void deleteatbeg(node**start)
{
	node*ptr;
	if(*start==NULL)
	{
		printf("\n ll is empty");
		return;
	}
	ptr=*start;
	*start=ptr->next;
	printf("\n deleted value=%d",ptr->info);
	free(ptr); 	//deallocate
}

void  deleteatend(node**start)
{
	node*ptr,*last;
	if(*start==NULL)
	{
		printf("\n ll is empty");
		return;
	}
	if((*start)->next==NULL)
	{
		ptr=*start;
		*start=ptr->next;
	}
	else{
		last=*start;
		while(last->next->next!=NULL)
		{	
			last=last->next;}
			last->next=NULL;
		}
	printf("\n deleted value=%d",ptr->info);
	free(ptr);	
	}

node *search(node*start,int key)
{
	while(start!=NULL&&start->info!=key)
	start =start->next;
	return start;
}

void displayinrev(node*start)
{
	if (start->next!=NULL)
	displayinrev(start->next);
	printf("%d",start->info);
}
